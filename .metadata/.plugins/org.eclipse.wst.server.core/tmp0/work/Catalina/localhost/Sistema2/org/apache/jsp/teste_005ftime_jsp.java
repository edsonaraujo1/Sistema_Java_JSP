/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.35
 * Generated at: 2013-03-18 17:21:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;
import java.util.*;
import java.text.*;
import java.sql.*;
import java.util.Date;

public final class teste_005ftime_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/config.jsp", Long.valueOf(1362954014485L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<script language=\"JavaScript\">\r\n");
      out.write("<!--\r\n");
      out.write("\r\n");
      out.write("//document.onkeydown = keyCatcher;\r\n");
      out.write("\r\n");
      out.write("function keyCatcher() \r\n");
      out.write("{\r\n");
      out.write("   var e = event.srcElement.tagName;\r\n");
      out.write("\r\n");
      out.write("   if (event.keyCode == 8 && e != \"INPUT\" && e != \"TEXTAREA\") \r\n");
      out.write("   {\r\n");
      out.write("      event.cancelBubble = true;\r\n");
      out.write("      event.returnValue = false;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   if (event.keyCode == 27) \r\n");
      out.write("   {\r\n");
      out.write("\t\twindow.location=\"\";\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("window.focus();\r\n");
      out.write("document.form1.nome_log.focus();\r\n");
      out.write("\r\n");
      out.write("//-->\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write(".normal {\r\n");
      out.write("\t\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write(".anormal {\r\n");
      out.write("\t\tbackground-color: Lavender;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

// Titulo do Sistema
String w_titulo   = "Sistema JSP";
String w_versaox  = "Atualizado em 10/03/2013 Ã s 17:12";

// Variaveis Banco de Dados
String driver_pes     = "com.mysql.jdbc.Driver";
String db_dados_pes   = "agenda";
String connection_pes = "jdbc:mysql://localhost:3306/" + db_dados_pes;
String user_pes       = "root";
String password_pes   = "12345";



      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>Sistema XP</title>\r\n");
      out.write("<link rel='shortcut icon' href='imagens/favicon.ico'>\r\n");
      out.write("\r\n");
      out.write("<link type=\"text/css\" rel=\"stylesheet\" href=\"menu.css\"/>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("\r\n");
      out.write("background-image: url('imagens/logosys.jpg');\r\n");
      out.write("background-attachment: fixed\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".normal {\r\n");
      out.write("\t\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write(".anormal {\r\n");
      out.write("\t\tbackground-color: Lavender;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script language=\"JavaScript\"><!--\r\n");
      out.write("\r\n");
      out.write("document.onkeydown = keyCatcher;\r\n");
      out.write("\r\n");
      out.write("function keyCatcher() \r\n");
      out.write("{\r\n");
      out.write("   var e = event.srcElement.tagName;\r\n");
      out.write("\r\n");
      out.write("   if (event.keyCode == 8 && e != \"INPUT\" && e != \"TEXTAREA\") \r\n");
      out.write("   {\r\n");
      out.write("      event.cancelBubble = true;\r\n");
      out.write("      event.returnValue = false;\r\n");
      out.write("   }\r\n");
      out.write("}\r\n");
      out.write("//-->\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");

// Rotinas Principais

// config.jsp
// login.jsp
// logar.jsp
// menu1.jsp


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

//int w_Hora = Integer.parseInt((new java.text.SimpleDateFormat()).format(new java.util.Date()));
//create the timer and timer task objects
String sql2 = "";

Class.forName(driver_pes);
Connection Con = DriverManager.getConnection(connection_pes, user_pes, password_pes);
Statement stm = Con.createStatement();

Timer timer = new Timer();
//MyTimerTask task = new MyTimerTask(); //this class implements Callable.

// get a calendar to initialize the start time
Calendar calendar = Calendar.getInstance();
//Calendar calendar = Calendar.getInstance();




if (calendar.get(Calendar.AM_PM) == Calendar.AM) {
  out.print("Morning");
} else {
  out.print("Afternoon");
}

int startTime = calendar.get(Calendar.HOUR);
int ms        = calendar.get(Calendar.MILLISECOND);
long ms2       = calendar.getTimeInMillis();
String ip = request.getRemoteAddr();
String correntPag = request.getContextPath() + request.getServletPath();

String Data_user  = new java.text.SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date());
String Hora_user  = new java.text.SimpleDateFormat("HH:mm:ss").format(new java.util.Date());


//int tempo = Integer.parseInt((new calendar.getTimeInMillis()));

//int w_Hora = Integer.parseInt((new java.text.SimpleDateFormat("Seg")).format(new java.util.Date()));

//String data = new java.util.Date();
//ms = data.Milliseconds();

// schedule the task to run hourly
//timer.scheduleAtFixedRate(task, startTime, 1000 * 60 * 60);


//out.println(starTime + "<br>");
out.println(timer + "<br>");
out.println(startTime + "<br>");

out.println("MS1=" + calendar.getTimeInMillis() + "<br><br><br>");
out.println(request.getRemoteAddr() + "<br>");
out.println(request.getRemoteHost() + "<br>");
out.println(request.getHeader("x-forwarded-for") + "<br>");

		
out.println("Milesegundos = " + ms2 + "<br>");
out.println("IP           = " + ip + "<br>");
out.println("Data         = " + Data_user + "<br>");
out.println("Hora         = " + Hora_user + "<br>");
out.println("Pagina       = " + correntPag + "<br>");
		


GregorianCalendar gc = new GregorianCalendar();  

gc.setTime(new Date());  


int w_Hora1 = Integer.parseInt((new java.text.SimpleDateFormat("HH")).format(new java.util.Date()));
int w_Minu1 = Integer.parseInt((new java.text.SimpleDateFormat("mm")).format(new java.util.Date()));
int w_Secu1 = Integer.parseInt((new java.text.SimpleDateFormat("ss")).format(new java.util.Date()));

SimpleDateFormat sdf    = new SimpleDateFormat("HH:mm:ss"); 

gc.set(0, 0, 0, w_Hora1, w_Minu1, w_Secu1);  
out.println("HORA ATUAL: " + sdf.format(gc.getTime()) + "<br>");  
  
gc.add(Calendar.HOUR, 0);  
gc.add(Calendar.MINUTE, 00);  
gc.add(Calendar.SECOND, 00);  
  
out.println("HORA SOMADA: " + sdf.format(gc.getTime()) + "<br><br><br>");  
out.println("Milessegundos: " + gc.getTimeInMillis());



//sql2 = "DELETE FROM useronline WHERE timestamp <" + ( ms2 * 60) + "";
//ResultSet res1x = stm.executeQuery(sql2);

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
